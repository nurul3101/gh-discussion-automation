name: Auto Close Stale Discussions

on:
  schedule:
    - cron: '0 0 * * *'  # Runs daily at midnight UTC
  workflow_dispatch:     # Enables manual run from the Actions tab

jobs:
  close-discussions:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install @octokit/rest

      - name: Run inline Discussion Cleanup Script
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TEAM_HANDLES: "nurul3101"  # Replace with your comma-separated GitHub handles
          CLOSING_MESSAGE: "Closing this discussion due to inactivity. Please reopen if needed."
        run: |
          cat > close-discussions.js <<'EOF'
          const { Octokit } = require("@octokit/rest");

          const OWNER = "prisma";
          const REPO = "prisma";
          const ONE_WEEK_MS = 7 * 24 * 60 * 60 * 1000;

          async function run() {
            const token = process.env.GITHUB_TOKEN;
            if (!token) {
              console.error("GITHUB_TOKEN not set");
              process.exit(1);
            }
            const teamHandlesEnv = process.env.TEAM_HANDLES;
            if (!teamHandlesEnv) {
              console.error("TEAM_HANDLES environment variable not set");
              process.exit(1);
            }
            const teamHandles = teamHandlesEnv.split(",").map(handle => handle.trim());
            const closingMessage = process.env.CLOSING_MESSAGE || "Closing discussion due to inactivity.";

            const octokit = new Octokit({
              auth: token,
              userAgent: "prisma/auto-close-discussions",
            });

            try {
              // 1. Fetch all discussions (using preview header)
              const discussionsResponse = await octokit.request("GET /repos/{owner}/{repo}/discussions", {
                owner: OWNER,
                repo: REPO,
                headers: {
                  accept: "application/vnd.github.echo-preview+json"
                }
              });
              const discussions = discussionsResponse.data;

              // 2. Filter open discussions that have the target labels
              const targetLabels = ["needs-information", "needs-confirmation"];
              const filteredDiscussions = discussions.filter(discussion => {
                if (discussion.state !== "open") return false;
                if (!discussion.labels || discussion.labels.length === 0) return false;
                const labels = discussion.labels.map(label => label.name);
                return targetLabels.some(target => labels.includes(target));
              });

              console.log(`Found ${filteredDiscussions.length} open discussions with target labels.`);

              // 3. Process each filtered discussion
              for (const discussion of filteredDiscussions) {
                const discussionNumber = discussion.number;
                console.log(`Processing discussion #${discussionNumber}: ${discussion.title}`);

                // Get all comments for the discussion
                const commentsResponse = await octokit.request("GET /repos/{owner}/{repo}/discussions/{discussion_number}/comments", {
                  owner: OWNER,
                  repo: REPO,
                  discussion_number: discussionNumber,
                  headers: {
                    accept: "application/vnd.github.echo-preview+json"
                  }
                });
                const comments = commentsResponse.data;
                if (comments.length === 0) {
                  console.log("No comments found, skipping.");
                  continue;
                }

                // Check if the last comment is by a team member and older than one week
                const lastComment = comments[comments.length - 1];
                const lastCommentDate = new Date(lastComment.created_at);
                const now = new Date();

                if (
                  teamHandles.includes(lastComment.user.login) &&
                  (now.getTime() - lastCommentDate.getTime() > ONE_WEEK_MS)
                ) {
                  console.log(`Discussion #${discussionNumber} qualifies for closure.`);

                  // 4. Post the closing comment
                  await octokit.request("POST /repos/{owner}/{repo}/discussions/{discussion_number}/comments", {
                    owner: OWNER,
                    repo: REPO,
                    discussion_number: discussionNumber,
                    headers: {
                      accept: "application/vnd.github.echo-preview+json"
                    },
                    body: closingMessage,
                  });
                  console.log(`Posted closing comment on discussion #${discussionNumber}.`);

                  // 5. Remove target labels
                  const remainingLabels = discussion.labels
                    .map(label => label.name)
                    .filter(labelName => !targetLabels.includes(labelName));
                  await octokit.request("PATCH /repos/{owner}/{repo}/discussions/{discussion_number}", {
                    owner: OWNER,
                    repo: REPO,
                    discussion_number: discussionNumber,
                    headers: {
                      accept: "application/vnd.github.echo-preview+json"
                    },
                    labels: remainingLabels,
                  });
                  console.log(`Removed target labels from discussion #${discussionNumber}.`);

                  // 6. Close the discussion (using closed state and reason)
                  await octokit.request("PATCH /repos/{owner}/{repo}/discussions/{discussion_number}", {
                    owner: OWNER,
                    repo: REPO,
                    discussion_number: discussionNumber,
                    headers: {
                      accept: "application/vnd.github.echo-preview+json"
                    },
                    state: "closed",
                    state_reason: "resolved",
                  });
                  console.log(`Closed discussion #${discussionNumber}.`);
                } else {
                  console.log(`Discussion #${discussionNumber} does not qualify for closure.`);
                }
              }
            } catch (error) {
              console.error("Error processing discussions:", error);
            }
          }

          run();
          EOF

          node close-discussions.js
